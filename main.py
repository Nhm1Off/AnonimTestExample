from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import asyncio

TOKEN = "8491900645:AAGx-I6Ce9wwydgUPOOR7ka4Pzp6k_ttv5M"

bot = Bot(token=TOKEN)
dp = Dispatcher()

queue = []
active_chats = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è aiogram v3
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]
    ],
    resize_keyboard=True
)

chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç ü§´\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
        reply_markup=menu_kb
    )

@dp.message(lambda m: m.text == "üîé –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def search_partner(message: types.Message):
    user_id = message.from_user.id
    if user_id in queue:
        await message.answer("–¢—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–¥–æ–∂–¥–∏ üôÉ")
        return

    queue.append(user_id)
    await message.answer("–¢—ã –≤ –æ—á–µ—Ä–µ–¥–∏... –∂–¥–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üëÄ")

    if len(queue) >= 2:
        user1 = queue.pop(0)
        user2 = queue.pop(0)
        active_chats[user1] = user2
        active_chats[user2] = user1

        await bot.send_message(user1, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=chat_kb)
        await bot.send_message(user2, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=chat_kb)

@dp.message(lambda m: m.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_chats:
        await message.answer("–¢—ã —Å–µ–π—á–∞—Å –Ω–∏ —Å –∫–µ–º –Ω–µ –æ–±—â–∞–µ—à—å—Å—è.", reply_markup=menu_kb)
        return

    partner_id = active_chats[user_id]
    await bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=menu_kb)
    await message.answer("‚ùå –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=menu_kb)

    del active_chats[user_id]
    del active_chats[partner_id]

@dp.message()
async def relay_message(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await bot.send_message(partner_id, message.text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
